/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-lib";
exports.ids = ["vendor-chunks/eth-lib"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-lib/lib/account.js":
/*!*********************************************!*\
  !*** ./node_modules/eth-lib/lib/account.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Bytes = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/eth-lib/lib/bytes.js\");\nconst Nat = __webpack_require__(/*! ./nat */ \"(ssr)/./node_modules/eth-lib/lib/nat.js\");\nconst elliptic = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\nconst rlp = __webpack_require__(/*! ./rlp */ \"(ssr)/./node_modules/eth-lib/lib/rlp.js\");\nconst secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\nconst { keccak256, keccak256s } = __webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/eth-lib/lib/hash.js\");\n\nconst create = entropy => {\n  const innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  const middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  const outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nconst toChecksum = address => {\n  const addressHash = keccak256s(address.slice(2));\n  let checksumAddress = \"0x\";\n  for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  return checksumAddress;\n};\n\nconst fromPrivate = privateKey => {\n  const buffer = new Buffer(privateKey.slice(2), \"hex\");\n  const ecKey = secp256k1.keyFromPrivate(buffer);\n  const publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nconst encodeSignature = ([v, r, s]) => Bytes.flatten([r, s, v]);\n\nconst decodeSignature = hex => [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n\nconst makeSigner = addToV => (hash, privateKey) => {\n  const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n  return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n};\n\nconst sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nconst recover = (hash, signature) => {\n  const vals = decodeSignature(signature);\n  const vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  const publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create,\n  toChecksum,\n  fromPrivate,\n  sign,\n  makeSigner,\n  recover,\n  encodeSignature,\n  decodeSignature\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvYWNjb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsMERBQVM7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLHNEQUFPO0FBQzNCLGlCQUFpQixtQkFBTyxDQUFDLCtEQUFVO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyxzREFBTztBQUMzQixnREFBZ0Q7QUFDaEQsUUFBUSx3QkFBd0IsRUFBRSxtQkFBTyxDQUFDLHdEQUFROztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsOEhBQThILGlCQUFpQjtBQUMvSTtBQUNBOztBQUVBLDZCQUE2Qjs7QUFFN0I7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQix5SEFBeUg7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rpd2ktYXBwLy4vbm9kZV9tb2R1bGVzL2V0aC1saWIvbGliL2FjY291bnQuanM/M2Y2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCeXRlcyA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xuY29uc3QgTmF0ID0gcmVxdWlyZShcIi4vbmF0XCIpO1xuY29uc3QgZWxsaXB0aWMgPSByZXF1aXJlKFwiZWxsaXB0aWNcIik7XG5jb25zdCBybHAgPSByZXF1aXJlKFwiLi9ybHBcIik7XG5jb25zdCBzZWNwMjU2azEgPSBuZXcgZWxsaXB0aWMuZWMoXCJzZWNwMjU2azFcIik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbmNvbnN0IHsga2VjY2FrMjU2LCBrZWNjYWsyNTZzIH0gPSByZXF1aXJlKFwiLi9oYXNoXCIpO1xuXG5jb25zdCBjcmVhdGUgPSBlbnRyb3B5ID0+IHtcbiAgY29uc3QgaW5uZXJIZXggPSBrZWNjYWsyNTYoQnl0ZXMuY29uY2F0KEJ5dGVzLnJhbmRvbSgzMiksIGVudHJvcHkgfHwgQnl0ZXMucmFuZG9tKDMyKSkpO1xuICBjb25zdCBtaWRkbGVIZXggPSBCeXRlcy5jb25jYXQoQnl0ZXMuY29uY2F0KEJ5dGVzLnJhbmRvbSgzMiksIGlubmVySGV4KSwgQnl0ZXMucmFuZG9tKDMyKSk7XG4gIGNvbnN0IG91dGVySGV4ID0ga2VjY2FrMjU2KG1pZGRsZUhleCk7XG4gIHJldHVybiBmcm9tUHJpdmF0ZShvdXRlckhleCk7XG59O1xuXG5jb25zdCB0b0NoZWNrc3VtID0gYWRkcmVzcyA9PiB7XG4gIGNvbnN0IGFkZHJlc3NIYXNoID0ga2VjY2FrMjU2cyhhZGRyZXNzLnNsaWNlKDIpKTtcbiAgbGV0IGNoZWNrc3VtQWRkcmVzcyA9IFwiMHhcIjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0MDsgaSsrKSBjaGVja3N1bUFkZHJlc3MgKz0gcGFyc2VJbnQoYWRkcmVzc0hhc2hbaSArIDJdLCAxNikgPiA3ID8gYWRkcmVzc1tpICsgMl0udG9VcHBlckNhc2UoKSA6IGFkZHJlc3NbaSArIDJdO1xuICByZXR1cm4gY2hlY2tzdW1BZGRyZXNzO1xufTtcblxuY29uc3QgZnJvbVByaXZhdGUgPSBwcml2YXRlS2V5ID0+IHtcbiAgY29uc3QgYnVmZmVyID0gbmV3IEJ1ZmZlcihwcml2YXRlS2V5LnNsaWNlKDIpLCBcImhleFwiKTtcbiAgY29uc3QgZWNLZXkgPSBzZWNwMjU2azEua2V5RnJvbVByaXZhdGUoYnVmZmVyKTtcbiAgY29uc3QgcHVibGljS2V5ID0gXCIweFwiICsgZWNLZXkuZ2V0UHVibGljKGZhbHNlLCAnaGV4Jykuc2xpY2UoMik7XG4gIGNvbnN0IHB1YmxpY0hhc2ggPSBrZWNjYWsyNTYocHVibGljS2V5KTtcbiAgY29uc3QgYWRkcmVzcyA9IHRvQ2hlY2tzdW0oXCIweFwiICsgcHVibGljSGFzaC5zbGljZSgtNDApKTtcbiAgcmV0dXJuIHtcbiAgICBhZGRyZXNzOiBhZGRyZXNzLFxuICAgIHByaXZhdGVLZXk6IHByaXZhdGVLZXlcbiAgfTtcbn07XG5cbmNvbnN0IGVuY29kZVNpZ25hdHVyZSA9IChbdiwgciwgc10pID0+IEJ5dGVzLmZsYXR0ZW4oW3IsIHMsIHZdKTtcblxuY29uc3QgZGVjb2RlU2lnbmF0dXJlID0gaGV4ID0+IFtCeXRlcy5zbGljZSg2NCwgQnl0ZXMubGVuZ3RoKGhleCksIGhleCksIEJ5dGVzLnNsaWNlKDAsIDMyLCBoZXgpLCBCeXRlcy5zbGljZSgzMiwgNjQsIGhleCldO1xuXG5jb25zdCBtYWtlU2lnbmVyID0gYWRkVG9WID0+IChoYXNoLCBwcml2YXRlS2V5KSA9PiB7XG4gIGNvbnN0IHNpZ25hdHVyZSA9IHNlY3AyNTZrMS5rZXlGcm9tUHJpdmF0ZShuZXcgQnVmZmVyKHByaXZhdGVLZXkuc2xpY2UoMiksIFwiaGV4XCIpKS5zaWduKG5ldyBCdWZmZXIoaGFzaC5zbGljZSgyKSwgXCJoZXhcIiksIHsgY2Fub25pY2FsOiB0cnVlIH0pO1xuICByZXR1cm4gZW5jb2RlU2lnbmF0dXJlKFtOYXQuZnJvbVN0cmluZyhCeXRlcy5mcm9tTnVtYmVyKGFkZFRvViArIHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtKSksIEJ5dGVzLnBhZCgzMiwgQnl0ZXMuZnJvbU5hdChcIjB4XCIgKyBzaWduYXR1cmUuci50b1N0cmluZygxNikpKSwgQnl0ZXMucGFkKDMyLCBCeXRlcy5mcm9tTmF0KFwiMHhcIiArIHNpZ25hdHVyZS5zLnRvU3RyaW5nKDE2KSkpXSk7XG59O1xuXG5jb25zdCBzaWduID0gbWFrZVNpZ25lcigyNyk7IC8vIHY9Mjd8MjggaW5zdGVhZCBvZiAwfDEuLi5cblxuY29uc3QgcmVjb3ZlciA9IChoYXNoLCBzaWduYXR1cmUpID0+IHtcbiAgY29uc3QgdmFscyA9IGRlY29kZVNpZ25hdHVyZShzaWduYXR1cmUpO1xuICBjb25zdCB2cnMgPSB7IHY6IEJ5dGVzLnRvTnVtYmVyKHZhbHNbMF0pLCByOiB2YWxzWzFdLnNsaWNlKDIpLCBzOiB2YWxzWzJdLnNsaWNlKDIpIH07XG4gIGNvbnN0IGVjUHVibGljS2V5ID0gc2VjcDI1NmsxLnJlY292ZXJQdWJLZXkobmV3IEJ1ZmZlcihoYXNoLnNsaWNlKDIpLCBcImhleFwiKSwgdnJzLCB2cnMudiA8IDIgPyB2cnMudiA6IDEgLSB2cnMudiAlIDIpOyAvLyBiZWNhdXNlIG9kZCB2YWxzIG1lYW4gdj0wLi4uIHNhZGx5IHRoYXQgbWVhbnMgdj0wIG1lYW5zIHY9MS4uLiBJIGhhdGUgdGhhdFxuICBjb25zdCBwdWJsaWNLZXkgPSBcIjB4XCIgKyBlY1B1YmxpY0tleS5lbmNvZGUoXCJoZXhcIiwgZmFsc2UpLnNsaWNlKDIpO1xuICBjb25zdCBwdWJsaWNIYXNoID0ga2VjY2FrMjU2KHB1YmxpY0tleSk7XG4gIGNvbnN0IGFkZHJlc3MgPSB0b0NoZWNrc3VtKFwiMHhcIiArIHB1YmxpY0hhc2guc2xpY2UoLTQwKSk7XG4gIHJldHVybiBhZGRyZXNzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZSxcbiAgdG9DaGVja3N1bSxcbiAgZnJvbVByaXZhdGUsXG4gIHNpZ24sXG4gIG1ha2VTaWduZXIsXG4gIHJlY292ZXIsXG4gIGVuY29kZVNpZ25hdHVyZSxcbiAgZGVjb2RlU2lnbmF0dXJlXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/array.js":
/*!*******************************************!*\
  !*** ./node_modules/eth-lib/lib/array.js ***!
  \*******************************************/
/***/ ((module) => {

eval("const generate = (num, fn) => {\n  let a = [];\n  for (var i = 0; i < num; ++i) a.push(fn(i));\n  return a;\n};\n\nconst replicate = (num, val) => generate(num, () => val);\n\nconst concat = (a, b) => a.concat(b);\n\nconst flatten = a => {\n  let r = [];\n  for (let j = 0, J = a.length; j < J; ++j) for (let i = 0, I = a[j].length; i < I; ++i) r.push(a[j][i]);\n  return r;\n};\n\nconst chunksOf = (n, a) => {\n  let b = [];\n  for (let i = 0, l = a.length; i < l; i += n) b.push(a.slice(i, i + n));\n  return b;\n};\n\nmodule.exports = {\n  generate,\n  replicate,\n  concat,\n  flatten,\n  chunksOf\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvYXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyxPQUFPLHNDQUFzQyxPQUFPO0FBQ3BGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyxPQUFPO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaXdpLWFwcC8uL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9hcnJheS5qcz8xYTZlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdlbmVyYXRlID0gKG51bSwgZm4pID0+IHtcbiAgbGV0IGEgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07ICsraSkgYS5wdXNoKGZuKGkpKTtcbiAgcmV0dXJuIGE7XG59O1xuXG5jb25zdCByZXBsaWNhdGUgPSAobnVtLCB2YWwpID0+IGdlbmVyYXRlKG51bSwgKCkgPT4gdmFsKTtcblxuY29uc3QgY29uY2F0ID0gKGEsIGIpID0+IGEuY29uY2F0KGIpO1xuXG5jb25zdCBmbGF0dGVuID0gYSA9PiB7XG4gIGxldCByID0gW107XG4gIGZvciAobGV0IGogPSAwLCBKID0gYS5sZW5ndGg7IGogPCBKOyArK2opIGZvciAobGV0IGkgPSAwLCBJID0gYVtqXS5sZW5ndGg7IGkgPCBJOyArK2kpIHIucHVzaChhW2pdW2ldKTtcbiAgcmV0dXJuIHI7XG59O1xuXG5jb25zdCBjaHVua3NPZiA9IChuLCBhKSA9PiB7XG4gIGxldCBiID0gW107XG4gIGZvciAobGV0IGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpICs9IG4pIGIucHVzaChhLnNsaWNlKGksIGkgKyBuKSk7XG4gIHJldHVybiBiO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdlbmVyYXRlLFxuICByZXBsaWNhdGUsXG4gIGNvbmNhdCxcbiAgZmxhdHRlbixcbiAgY2h1bmtzT2Zcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/array.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/bytes.js":
/*!*******************************************!*\
  !*** ./node_modules/eth-lib/lib/bytes.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const A = __webpack_require__(/*! ./array.js */ \"(ssr)/./node_modules/eth-lib/lib/array.js\");\n\nconst at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);\n\nconst random = bytes => {\n  let rnd;\n  if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (true) rnd = (__webpack_require__(/*! crypto */ \"crypto\").randomBytes)(bytes);else {}\n  let hex = \"0x\";\n  for (let i = 0; i < bytes; ++i) hex += (\"00\" + rnd[i].toString(16)).slice(-2);\n  return hex;\n};\n\nconst length = a => (a.length - 2) / 2;\n\nconst flatten = a => \"0x\" + a.reduce((r, s) => r + s.slice(2), \"\");\n\nconst slice = (i, j, bs) => \"0x\" + bs.slice(i * 2 + 2, j * 2 + 2);\n\nconst reverse = hex => {\n  let rev = \"0x\";\n  for (let i = 0, l = length(hex); i < l; ++i) {\n    rev += hex.slice((l - i) * 2, (l - i + 1) * 2);\n  }\n  return rev;\n};\n\nconst pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, \"0x\" + \"0\" + hex.slice(2));\n\nconst padRight = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight(l, hex + \"0\");\n\nconst toArray = hex => {\n  let arr = [];\n  for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));\n  return arr;\n};\n\nconst fromArray = arr => {\n  let hex = \"0x\";\n  for (let i = 0, l = arr.length; i < l; ++i) {\n    let b = arr[i];\n    hex += (b < 16 ? \"0\" : \"\") + b.toString(16);\n  }\n  return hex;\n};\n\nconst toUint8Array = hex => new Uint8Array(toArray(hex));\n\nconst fromUint8Array = arr => fromArray([].slice.call(arr, 0));\n\nconst fromNumber = num => {\n  let hex = num.toString(16);\n  return hex.length % 2 === 0 ? \"0x\" + hex : \"0x0\" + hex;\n};\n\nconst toNumber = hex => parseInt(hex.slice(2), 16);\n\nconst concat = (a, b) => a.concat(b.slice(2));\n\nconst fromNat = bn => bn === \"0x0\" ? \"0x\" : bn.length % 2 === 0 ? bn : \"0x0\" + bn.slice(2);\n\nconst toNat = bn => bn[2] === \"0\" ? \"0x\" + bn.slice(3) : bn;\n\nconst fromAscii = ascii => {\n  let hex = \"0x\";\n  for (let i = 0; i < ascii.length; ++i) hex += (\"00\" + ascii.charCodeAt(i).toString(16)).slice(-2);\n  return hex;\n};\n\nconst toAscii = hex => {\n  let ascii = \"\";\n  for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));\n  return ascii;\n};\n\n// From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\nconst fromString = s => {\n  const makeByte = uint8 => {\n    const b = uint8.toString(16);\n    return b.length < 2 ? \"0\" + b : b;\n  };\n  let bytes = \"0x\";\n  for (let ci = 0; ci != s.length; ci++) {\n    let c = s.charCodeAt(ci);\n    if (c < 128) {\n      bytes += makeByte(c);\n      continue;\n    }\n    if (c < 2048) {\n      bytes += makeByte(c >> 6 | 192);\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) return null;\n        let c2 = s.charCodeAt(ci);\n        if (c2 < 0xdc00 || c2 > 0xdfff) return null;\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n        bytes += makeByte(c >> 18 | 240);\n        bytes += makeByte(c >> 12 & 63 | 128);\n      } else {\n        // c <= 0xffff\n        bytes += makeByte(c >> 12 | 224);\n      }\n      bytes += makeByte(c >> 6 & 63 | 128);\n    }\n    bytes += makeByte(c & 63 | 128);\n  }\n  return bytes;\n};\n\nconst toString = bytes => {\n  let s = '';\n  let i = 0;\n  let l = length(bytes);\n  while (i < l) {\n    let c = at(bytes, i++);\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= l) return null;\n        c = (c & 31) << 6 | at(bytes, i) & 63;\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= l) return null;\n        c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= l) return null;\n        c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else return null;\n      ++i;\n    }\n    if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n      c -= 0x10000;\n      s += String.fromCharCode(c >> 10 | 0xd800);\n      s += String.fromCharCode(c & 0x3FF | 0xdc00);\n    } else return null;\n  }\n  return s;\n};\n\nmodule.exports = {\n  random,\n  length,\n  concat,\n  flatten,\n  slice,\n  reverse,\n  pad,\n  padRight,\n  fromAscii,\n  toAscii,\n  fromString,\n  toString,\n  fromNumber,\n  toNumber,\n  fromNat,\n  toNat,\n  fromArray,\n  toArray,\n  fromUint8Array,\n  toUint8Array\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvYnl0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsVUFBVSxtQkFBTyxDQUFDLDZEQUFZOztBQUU5Qjs7QUFFQTtBQUNBO0FBQ0Esa0pBQWtKLFNBQVMsSUFBOEIsUUFBUSx5REFBa0MsUUFBUSxLQUFLLEVBQTJDO0FBQzNSO0FBQ0Esa0JBQWtCLFdBQVc7QUFDN0I7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rpd2ktYXBwLy4vbm9kZV9tb2R1bGVzL2V0aC1saWIvbGliL2J5dGVzLmpzPzA3ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQSA9IHJlcXVpcmUoXCIuL2FycmF5LmpzXCIpO1xuXG5jb25zdCBhdCA9IChieXRlcywgaW5kZXgpID0+IHBhcnNlSW50KGJ5dGVzLnNsaWNlKGluZGV4ICogMiArIDIsIGluZGV4ICogMiArIDQpLCAxNik7XG5cbmNvbnN0IHJhbmRvbSA9IGJ5dGVzID0+IHtcbiAgbGV0IHJuZDtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmNyeXB0byAmJiB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcykgcm5kID0gd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKTtlbHNlIGlmICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIikgcm5kID0gcmVxdWlyZShcImNcIiArIFwicnlwdG9cIikucmFuZG9tQnl0ZXMoYnl0ZXMpO2Vsc2UgdGhyb3cgXCJTYWZlIHJhbmRvbSBudW1iZXJzIG5vdCBhdmFpbGFibGUuXCI7XG4gIGxldCBoZXggPSBcIjB4XCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXM7ICsraSkgaGV4ICs9IChcIjAwXCIgKyBybmRbaV0udG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG4gIHJldHVybiBoZXg7XG59O1xuXG5jb25zdCBsZW5ndGggPSBhID0+IChhLmxlbmd0aCAtIDIpIC8gMjtcblxuY29uc3QgZmxhdHRlbiA9IGEgPT4gXCIweFwiICsgYS5yZWR1Y2UoKHIsIHMpID0+IHIgKyBzLnNsaWNlKDIpLCBcIlwiKTtcblxuY29uc3Qgc2xpY2UgPSAoaSwgaiwgYnMpID0+IFwiMHhcIiArIGJzLnNsaWNlKGkgKiAyICsgMiwgaiAqIDIgKyAyKTtcblxuY29uc3QgcmV2ZXJzZSA9IGhleCA9PiB7XG4gIGxldCByZXYgPSBcIjB4XCI7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gbGVuZ3RoKGhleCk7IGkgPCBsOyArK2kpIHtcbiAgICByZXYgKz0gaGV4LnNsaWNlKChsIC0gaSkgKiAyLCAobCAtIGkgKyAxKSAqIDIpO1xuICB9XG4gIHJldHVybiByZXY7XG59O1xuXG5jb25zdCBwYWQgPSAobCwgaGV4KSA9PiBoZXgubGVuZ3RoID09PSBsICogMiArIDIgPyBoZXggOiBwYWQobCwgXCIweFwiICsgXCIwXCIgKyBoZXguc2xpY2UoMikpO1xuXG5jb25zdCBwYWRSaWdodCA9IChsLCBoZXgpID0+IGhleC5sZW5ndGggPT09IGwgKiAyICsgMiA/IGhleCA6IHBhZFJpZ2h0KGwsIGhleCArIFwiMFwiKTtcblxuY29uc3QgdG9BcnJheSA9IGhleCA9PiB7XG4gIGxldCBhcnIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDIsIGwgPSBoZXgubGVuZ3RoOyBpIDwgbDsgaSArPSAyKSBhcnIucHVzaChwYXJzZUludChoZXguc2xpY2UoaSwgaSArIDIpLCAxNikpO1xuICByZXR1cm4gYXJyO1xufTtcblxuY29uc3QgZnJvbUFycmF5ID0gYXJyID0+IHtcbiAgbGV0IGhleCA9IFwiMHhcIjtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgbGV0IGIgPSBhcnJbaV07XG4gICAgaGV4ICs9IChiIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgYi50b1N0cmluZygxNik7XG4gIH1cbiAgcmV0dXJuIGhleDtcbn07XG5cbmNvbnN0IHRvVWludDhBcnJheSA9IGhleCA9PiBuZXcgVWludDhBcnJheSh0b0FycmF5KGhleCkpO1xuXG5jb25zdCBmcm9tVWludDhBcnJheSA9IGFyciA9PiBmcm9tQXJyYXkoW10uc2xpY2UuY2FsbChhcnIsIDApKTtcblxuY29uc3QgZnJvbU51bWJlciA9IG51bSA9PiB7XG4gIGxldCBoZXggPSBudW0udG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCAlIDIgPT09IDAgPyBcIjB4XCIgKyBoZXggOiBcIjB4MFwiICsgaGV4O1xufTtcblxuY29uc3QgdG9OdW1iZXIgPSBoZXggPT4gcGFyc2VJbnQoaGV4LnNsaWNlKDIpLCAxNik7XG5cbmNvbnN0IGNvbmNhdCA9IChhLCBiKSA9PiBhLmNvbmNhdChiLnNsaWNlKDIpKTtcblxuY29uc3QgZnJvbU5hdCA9IGJuID0+IGJuID09PSBcIjB4MFwiID8gXCIweFwiIDogYm4ubGVuZ3RoICUgMiA9PT0gMCA/IGJuIDogXCIweDBcIiArIGJuLnNsaWNlKDIpO1xuXG5jb25zdCB0b05hdCA9IGJuID0+IGJuWzJdID09PSBcIjBcIiA/IFwiMHhcIiArIGJuLnNsaWNlKDMpIDogYm47XG5cbmNvbnN0IGZyb21Bc2NpaSA9IGFzY2lpID0+IHtcbiAgbGV0IGhleCA9IFwiMHhcIjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc2NpaS5sZW5ndGg7ICsraSkgaGV4ICs9IChcIjAwXCIgKyBhc2NpaS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICByZXR1cm4gaGV4O1xufTtcblxuY29uc3QgdG9Bc2NpaSA9IGhleCA9PiB7XG4gIGxldCBhc2NpaSA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSAyOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSBhc2NpaSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleC5zbGljZShpLCBpICsgMiksIDE2KSk7XG4gIHJldHVybiBhc2NpaTtcbn07XG5cbi8vIEZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGFzY2FsZGVrbG9lLzYyNTQ2MTAzYTE1NzY4MDNkYWRlOTI2OWNjZjc2MzMwXG5jb25zdCBmcm9tU3RyaW5nID0gcyA9PiB7XG4gIGNvbnN0IG1ha2VCeXRlID0gdWludDggPT4ge1xuICAgIGNvbnN0IGIgPSB1aW50OC50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIGIubGVuZ3RoIDwgMiA/IFwiMFwiICsgYiA6IGI7XG4gIH07XG4gIGxldCBieXRlcyA9IFwiMHhcIjtcbiAgZm9yIChsZXQgY2kgPSAwOyBjaSAhPSBzLmxlbmd0aDsgY2krKykge1xuICAgIGxldCBjID0gcy5jaGFyQ29kZUF0KGNpKTtcbiAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgYnl0ZXMgKz0gbWFrZUJ5dGUoYyk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGMgPCAyMDQ4KSB7XG4gICAgICBieXRlcyArPSBtYWtlQnl0ZShjID4+IDYgfCAxOTIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYyA+IDB4ZDdmZiAmJiBjIDwgMHhkYzAwKSB7XG4gICAgICAgIGlmICgrK2NpID09IHMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IGMyID0gcy5jaGFyQ29kZUF0KGNpKTtcbiAgICAgICAgaWYgKGMyIDwgMHhkYzAwIHx8IGMyID4gMHhkZmZmKSByZXR1cm4gbnVsbDtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChjMiAmIDB4MDNmZik7XG4gICAgICAgIGJ5dGVzICs9IG1ha2VCeXRlKGMgPj4gMTggfCAyNDApO1xuICAgICAgICBieXRlcyArPSBtYWtlQnl0ZShjID4+IDEyICYgNjMgfCAxMjgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYyA8PSAweGZmZmZcbiAgICAgICAgYnl0ZXMgKz0gbWFrZUJ5dGUoYyA+PiAxMiB8IDIyNCk7XG4gICAgICB9XG4gICAgICBieXRlcyArPSBtYWtlQnl0ZShjID4+IDYgJiA2MyB8IDEyOCk7XG4gICAgfVxuICAgIGJ5dGVzICs9IG1ha2VCeXRlKGMgJiA2MyB8IDEyOCk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufTtcblxuY29uc3QgdG9TdHJpbmcgPSBieXRlcyA9PiB7XG4gIGxldCBzID0gJyc7XG4gIGxldCBpID0gMDtcbiAgbGV0IGwgPSBsZW5ndGgoYnl0ZXMpO1xuICB3aGlsZSAoaSA8IGwpIHtcbiAgICBsZXQgYyA9IGF0KGJ5dGVzLCBpKyspO1xuICAgIGlmIChjID4gMTI3KSB7XG4gICAgICBpZiAoYyA+IDE5MSAmJiBjIDwgMjI0KSB7XG4gICAgICAgIGlmIChpID49IGwpIHJldHVybiBudWxsO1xuICAgICAgICBjID0gKGMgJiAzMSkgPDwgNiB8IGF0KGJ5dGVzLCBpKSAmIDYzO1xuICAgICAgfSBlbHNlIGlmIChjID4gMjIzICYmIGMgPCAyNDApIHtcbiAgICAgICAgaWYgKGkgKyAxID49IGwpIHJldHVybiBudWxsO1xuICAgICAgICBjID0gKGMgJiAxNSkgPDwgMTIgfCAoYXQoYnl0ZXMsIGkpICYgNjMpIDw8IDYgfCBhdChieXRlcywgKytpKSAmIDYzO1xuICAgICAgfSBlbHNlIGlmIChjID4gMjM5ICYmIGMgPCAyNDgpIHtcbiAgICAgICAgaWYgKGkgKyAyID49IGwpIHJldHVybiBudWxsO1xuICAgICAgICBjID0gKGMgJiA3KSA8PCAxOCB8IChhdChieXRlcywgaSkgJiA2MykgPDwgMTIgfCAoYXQoYnl0ZXMsICsraSkgJiA2MykgPDwgNiB8IGF0KGJ5dGVzLCArK2kpICYgNjM7XG4gICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICArK2k7XG4gICAgfVxuICAgIGlmIChjIDw9IDB4ZmZmZikgcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO2Vsc2UgaWYgKGMgPD0gMHgxMGZmZmYpIHtcbiAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjID4+IDEwIHwgMHhkODAwKTtcbiAgICAgIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjICYgMHgzRkYgfCAweGRjMDApO1xuICAgIH0gZWxzZSByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByYW5kb20sXG4gIGxlbmd0aCxcbiAgY29uY2F0LFxuICBmbGF0dGVuLFxuICBzbGljZSxcbiAgcmV2ZXJzZSxcbiAgcGFkLFxuICBwYWRSaWdodCxcbiAgZnJvbUFzY2lpLFxuICB0b0FzY2lpLFxuICBmcm9tU3RyaW5nLFxuICB0b1N0cmluZyxcbiAgZnJvbU51bWJlcixcbiAgdG9OdW1iZXIsXG4gIGZyb21OYXQsXG4gIHRvTmF0LFxuICBmcm9tQXJyYXksXG4gIHRvQXJyYXksXG4gIGZyb21VaW50OEFycmF5LFxuICB0b1VpbnQ4QXJyYXlcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/eth-lib/lib/hash.js ***!
  \******************************************/
/***/ ((module) => {

eval("// This was ported from https://github.com/emn178/js-sha3, with some minor\n// modifications and pruning. It is licensed under MIT:\n//\n// Copyright 2015-2016 Chen, Yi-Cyuan\n//  \n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst HEX_CHARS = '0123456789abcdef'.split('');\nconst KECCAK_PADDING = [1, 256, 65536, 16777216];\nconst SHIFT = [0, 8, 16, 24];\nconst RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n\nconst Keccak = bits => ({\n  blocks: [],\n  reset: true,\n  block: 0,\n  start: 0,\n  blockCount: 1600 - (bits << 1) >> 5,\n  outputBlocks: bits >> 5,\n  s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n});\n\nconst update = (state, message) => {\n  var length = message.length,\n      blocks = state.blocks,\n      byteCount = state.blockCount << 2,\n      blockCount = state.blockCount,\n      outputBlocks = state.outputBlocks,\n      s = state.s,\n      index = 0,\n      i,\n      code;\n\n  // update\n  while (index < length) {\n    if (state.reset) {\n      state.reset = false;\n      blocks[0] = state.block;\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    if (typeof message !== \"string\") {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n      }\n    } else {\n      for (i = state.start; index < length && i < byteCount; ++index) {\n        code = message.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i >> 2] |= code << SHIFT[i++ & 3];\n        } else if (code < 0x800) {\n          blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n          blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n          blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n        }\n      }\n    }\n    state.lastByteIndex = i;\n    if (i >= byteCount) {\n      state.start = i - byteCount;\n      state.block = blocks[blockCount];\n      for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n      }\n      f(s);\n      state.reset = true;\n    } else {\n      state.start = i;\n    }\n  }\n\n  // finalize\n  i = state.lastByteIndex;\n  blocks[i >> 2] |= KECCAK_PADDING[i & 3];\n  if (state.lastByteIndex === byteCount) {\n    blocks[0] = blocks[blockCount];\n    for (i = 1; i < blockCount + 1; ++i) {\n      blocks[i] = 0;\n    }\n  }\n  blocks[blockCount - 1] |= 0x80000000;\n  for (i = 0; i < blockCount; ++i) {\n    s[i] ^= blocks[i];\n  }\n  f(s);\n\n  // toString\n  var hex = '',\n      i = 0,\n      j = 0,\n      block;\n  while (j < outputBlocks) {\n    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n      block = s[i];\n      hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n    }\n    if (j % blockCount === 0) {\n      f(s);\n      i = 0;\n    }\n  }\n  return \"0x\" + hex;\n};\n\nconst f = s => {\n  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n  for (n = 0; n < 48; n += 2) {\n    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n    h = c8 ^ (c2 << 1 | c3 >>> 31);\n    l = c9 ^ (c3 << 1 | c2 >>> 31);\n    s[0] ^= h;\n    s[1] ^= l;\n    s[10] ^= h;\n    s[11] ^= l;\n    s[20] ^= h;\n    s[21] ^= l;\n    s[30] ^= h;\n    s[31] ^= l;\n    s[40] ^= h;\n    s[41] ^= l;\n    h = c0 ^ (c4 << 1 | c5 >>> 31);\n    l = c1 ^ (c5 << 1 | c4 >>> 31);\n    s[2] ^= h;\n    s[3] ^= l;\n    s[12] ^= h;\n    s[13] ^= l;\n    s[22] ^= h;\n    s[23] ^= l;\n    s[32] ^= h;\n    s[33] ^= l;\n    s[42] ^= h;\n    s[43] ^= l;\n    h = c2 ^ (c6 << 1 | c7 >>> 31);\n    l = c3 ^ (c7 << 1 | c6 >>> 31);\n    s[4] ^= h;\n    s[5] ^= l;\n    s[14] ^= h;\n    s[15] ^= l;\n    s[24] ^= h;\n    s[25] ^= l;\n    s[34] ^= h;\n    s[35] ^= l;\n    s[44] ^= h;\n    s[45] ^= l;\n    h = c4 ^ (c8 << 1 | c9 >>> 31);\n    l = c5 ^ (c9 << 1 | c8 >>> 31);\n    s[6] ^= h;\n    s[7] ^= l;\n    s[16] ^= h;\n    s[17] ^= l;\n    s[26] ^= h;\n    s[27] ^= l;\n    s[36] ^= h;\n    s[37] ^= l;\n    s[46] ^= h;\n    s[47] ^= l;\n    h = c6 ^ (c0 << 1 | c1 >>> 31);\n    l = c7 ^ (c1 << 1 | c0 >>> 31);\n    s[8] ^= h;\n    s[9] ^= l;\n    s[18] ^= h;\n    s[19] ^= l;\n    s[28] ^= h;\n    s[29] ^= l;\n    s[38] ^= h;\n    s[39] ^= l;\n    s[48] ^= h;\n    s[49] ^= l;\n\n    b0 = s[0];\n    b1 = s[1];\n    b32 = s[11] << 4 | s[10] >>> 28;\n    b33 = s[10] << 4 | s[11] >>> 28;\n    b14 = s[20] << 3 | s[21] >>> 29;\n    b15 = s[21] << 3 | s[20] >>> 29;\n    b46 = s[31] << 9 | s[30] >>> 23;\n    b47 = s[30] << 9 | s[31] >>> 23;\n    b28 = s[40] << 18 | s[41] >>> 14;\n    b29 = s[41] << 18 | s[40] >>> 14;\n    b20 = s[2] << 1 | s[3] >>> 31;\n    b21 = s[3] << 1 | s[2] >>> 31;\n    b2 = s[13] << 12 | s[12] >>> 20;\n    b3 = s[12] << 12 | s[13] >>> 20;\n    b34 = s[22] << 10 | s[23] >>> 22;\n    b35 = s[23] << 10 | s[22] >>> 22;\n    b16 = s[33] << 13 | s[32] >>> 19;\n    b17 = s[32] << 13 | s[33] >>> 19;\n    b48 = s[42] << 2 | s[43] >>> 30;\n    b49 = s[43] << 2 | s[42] >>> 30;\n    b40 = s[5] << 30 | s[4] >>> 2;\n    b41 = s[4] << 30 | s[5] >>> 2;\n    b22 = s[14] << 6 | s[15] >>> 26;\n    b23 = s[15] << 6 | s[14] >>> 26;\n    b4 = s[25] << 11 | s[24] >>> 21;\n    b5 = s[24] << 11 | s[25] >>> 21;\n    b36 = s[34] << 15 | s[35] >>> 17;\n    b37 = s[35] << 15 | s[34] >>> 17;\n    b18 = s[45] << 29 | s[44] >>> 3;\n    b19 = s[44] << 29 | s[45] >>> 3;\n    b10 = s[6] << 28 | s[7] >>> 4;\n    b11 = s[7] << 28 | s[6] >>> 4;\n    b42 = s[17] << 23 | s[16] >>> 9;\n    b43 = s[16] << 23 | s[17] >>> 9;\n    b24 = s[26] << 25 | s[27] >>> 7;\n    b25 = s[27] << 25 | s[26] >>> 7;\n    b6 = s[36] << 21 | s[37] >>> 11;\n    b7 = s[37] << 21 | s[36] >>> 11;\n    b38 = s[47] << 24 | s[46] >>> 8;\n    b39 = s[46] << 24 | s[47] >>> 8;\n    b30 = s[8] << 27 | s[9] >>> 5;\n    b31 = s[9] << 27 | s[8] >>> 5;\n    b12 = s[18] << 20 | s[19] >>> 12;\n    b13 = s[19] << 20 | s[18] >>> 12;\n    b44 = s[29] << 7 | s[28] >>> 25;\n    b45 = s[28] << 7 | s[29] >>> 25;\n    b26 = s[38] << 8 | s[39] >>> 24;\n    b27 = s[39] << 8 | s[38] >>> 24;\n    b8 = s[48] << 14 | s[49] >>> 18;\n    b9 = s[49] << 14 | s[48] >>> 18;\n\n    s[0] = b0 ^ ~b2 & b4;\n    s[1] = b1 ^ ~b3 & b5;\n    s[10] = b10 ^ ~b12 & b14;\n    s[11] = b11 ^ ~b13 & b15;\n    s[20] = b20 ^ ~b22 & b24;\n    s[21] = b21 ^ ~b23 & b25;\n    s[30] = b30 ^ ~b32 & b34;\n    s[31] = b31 ^ ~b33 & b35;\n    s[40] = b40 ^ ~b42 & b44;\n    s[41] = b41 ^ ~b43 & b45;\n    s[2] = b2 ^ ~b4 & b6;\n    s[3] = b3 ^ ~b5 & b7;\n    s[12] = b12 ^ ~b14 & b16;\n    s[13] = b13 ^ ~b15 & b17;\n    s[22] = b22 ^ ~b24 & b26;\n    s[23] = b23 ^ ~b25 & b27;\n    s[32] = b32 ^ ~b34 & b36;\n    s[33] = b33 ^ ~b35 & b37;\n    s[42] = b42 ^ ~b44 & b46;\n    s[43] = b43 ^ ~b45 & b47;\n    s[4] = b4 ^ ~b6 & b8;\n    s[5] = b5 ^ ~b7 & b9;\n    s[14] = b14 ^ ~b16 & b18;\n    s[15] = b15 ^ ~b17 & b19;\n    s[24] = b24 ^ ~b26 & b28;\n    s[25] = b25 ^ ~b27 & b29;\n    s[34] = b34 ^ ~b36 & b38;\n    s[35] = b35 ^ ~b37 & b39;\n    s[44] = b44 ^ ~b46 & b48;\n    s[45] = b45 ^ ~b47 & b49;\n    s[6] = b6 ^ ~b8 & b0;\n    s[7] = b7 ^ ~b9 & b1;\n    s[16] = b16 ^ ~b18 & b10;\n    s[17] = b17 ^ ~b19 & b11;\n    s[26] = b26 ^ ~b28 & b20;\n    s[27] = b27 ^ ~b29 & b21;\n    s[36] = b36 ^ ~b38 & b30;\n    s[37] = b37 ^ ~b39 & b31;\n    s[46] = b46 ^ ~b48 & b40;\n    s[47] = b47 ^ ~b49 & b41;\n    s[8] = b8 ^ ~b0 & b2;\n    s[9] = b9 ^ ~b1 & b3;\n    s[18] = b18 ^ ~b10 & b12;\n    s[19] = b19 ^ ~b11 & b13;\n    s[28] = b28 ^ ~b20 & b22;\n    s[29] = b29 ^ ~b21 & b23;\n    s[38] = b38 ^ ~b30 & b32;\n    s[39] = b39 ^ ~b31 & b33;\n    s[48] = b48 ^ ~b40 & b42;\n    s[49] = b49 ^ ~b41 & b43;\n\n    s[0] ^= RC[n];\n    s[1] ^= RC[n + 1];\n  }\n};\n\nconst keccak = bits => str => {\n  var msg;\n  if (str.slice(0, 2) === \"0x\") {\n    msg = [];\n    for (var i = 2, l = str.length; i < l; i += 2) msg.push(parseInt(str.slice(i, i + 2), 16));\n  } else {\n    msg = str;\n  }\n  return update(Keccak(bits, bits), msg);\n};\n\nmodule.exports = {\n  keccak256: keccak(256),\n  keccak512: keccak(512),\n  keccak256s: keccak(256),\n  keccak512s: keccak(512)\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvaGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlDQUFpQztBQUM3RDtBQUNBO0FBQ0EsTUFBTTtBQUNOLDRCQUE0QixpQ0FBaUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnQkFBZ0I7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvQ0FBb0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxPQUFPO0FBQzNDLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kaXdpLWFwcC8uL25vZGVfbW9kdWxlcy9ldGgtbGliL2xpYi9oYXNoLmpzPzQxOTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyB3YXMgcG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VtbjE3OC9qcy1zaGEzLCB3aXRoIHNvbWUgbWlub3Jcbi8vIG1vZGlmaWNhdGlvbnMgYW5kIHBydW5pbmcuIEl0IGlzIGxpY2Vuc2VkIHVuZGVyIE1JVDpcbi8vXG4vLyBDb3B5cmlnaHQgMjAxNS0yMDE2IENoZW4sIFlpLUN5dWFuXG4vLyAgXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbi8vIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbi8vIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuLy8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy8gXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuLy8gaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vLyBcbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4vLyBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4vLyBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4vLyBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4vLyBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5jb25zdCBIRVhfQ0hBUlMgPSAnMDEyMzQ1Njc4OWFiY2RlZicuc3BsaXQoJycpO1xuY29uc3QgS0VDQ0FLX1BBRERJTkcgPSBbMSwgMjU2LCA2NTUzNiwgMTY3NzcyMTZdO1xuY29uc3QgU0hJRlQgPSBbMCwgOCwgMTYsIDI0XTtcbmNvbnN0IFJDID0gWzEsIDAsIDMyODk4LCAwLCAzMjkwNiwgMjE0NzQ4MzY0OCwgMjE0NzUxNjQxNiwgMjE0NzQ4MzY0OCwgMzI5MDcsIDAsIDIxNDc0ODM2NDksIDAsIDIxNDc1MTY1NDUsIDIxNDc0ODM2NDgsIDMyNzc3LCAyMTQ3NDgzNjQ4LCAxMzgsIDAsIDEzNiwgMCwgMjE0NzUxNjQyNSwgMCwgMjE0NzQ4MzY1OCwgMCwgMjE0NzUxNjU1NSwgMCwgMTM5LCAyMTQ3NDgzNjQ4LCAzMjkwNSwgMjE0NzQ4MzY0OCwgMzI3NzEsIDIxNDc0ODM2NDgsIDMyNzcwLCAyMTQ3NDgzNjQ4LCAxMjgsIDIxNDc0ODM2NDgsIDMyNzc4LCAwLCAyMTQ3NDgzNjU4LCAyMTQ3NDgzNjQ4LCAyMTQ3NTE2NTQ1LCAyMTQ3NDgzNjQ4LCAzMjg5NiwgMjE0NzQ4MzY0OCwgMjE0NzQ4MzY0OSwgMCwgMjE0NzUxNjQyNCwgMjE0NzQ4MzY0OF07XG5cbmNvbnN0IEtlY2NhayA9IGJpdHMgPT4gKHtcbiAgYmxvY2tzOiBbXSxcbiAgcmVzZXQ6IHRydWUsXG4gIGJsb2NrOiAwLFxuICBzdGFydDogMCxcbiAgYmxvY2tDb3VudDogMTYwMCAtIChiaXRzIDw8IDEpID4+IDUsXG4gIG91dHB1dEJsb2NrczogYml0cyA+PiA1LFxuICBzOiAocyA9PiBbXS5jb25jYXQocywgcywgcywgcywgcykpKFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSlcbn0pO1xuXG5jb25zdCB1cGRhdGUgPSAoc3RhdGUsIG1lc3NhZ2UpID0+IHtcbiAgdmFyIGxlbmd0aCA9IG1lc3NhZ2UubGVuZ3RoLFxuICAgICAgYmxvY2tzID0gc3RhdGUuYmxvY2tzLFxuICAgICAgYnl0ZUNvdW50ID0gc3RhdGUuYmxvY2tDb3VudCA8PCAyLFxuICAgICAgYmxvY2tDb3VudCA9IHN0YXRlLmJsb2NrQ291bnQsXG4gICAgICBvdXRwdXRCbG9ja3MgPSBzdGF0ZS5vdXRwdXRCbG9ja3MsXG4gICAgICBzID0gc3RhdGUucyxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGksXG4gICAgICBjb2RlO1xuXG4gIC8vIHVwZGF0ZVxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoc3RhdGUucmVzZXQpIHtcbiAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICBibG9ja3NbMF0gPSBzdGF0ZS5ibG9jaztcbiAgICAgIGZvciAoaSA9IDE7IGkgPCBibG9ja0NvdW50ICsgMTsgKytpKSB7XG4gICAgICAgIGJsb2Nrc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgZm9yIChpID0gc3RhdGUuc3RhcnQ7IGluZGV4IDwgbGVuZ3RoICYmIGkgPCBieXRlQ291bnQ7ICsraW5kZXgpIHtcbiAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gbWVzc2FnZVtpbmRleF0gPDwgU0hJRlRbaSsrICYgM107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IHN0YXRlLnN0YXJ0OyBpbmRleCA8IGxlbmd0aCAmJiBpIDwgYnl0ZUNvdW50OyArK2luZGV4KSB7XG4gICAgICAgIGNvZGUgPSBtZXNzYWdlLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICBpZiAoY29kZSA8IDB4ODApIHtcbiAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSBjb2RlIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweDgwMCkge1xuICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweGMwIHwgY29kZSA+PiA2KSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IGNvZGUgJiAweDNmKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlIDwgMHhkODAwIHx8IGNvZGUgPj0gMHhlMDAwKSB7XG4gICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ZTAgfCBjb2RlID4+IDEyKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IGNvZGUgPj4gNiAmIDB4M2YpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweDgwIHwgY29kZSAmIDB4M2YpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvZGUgPSAweDEwMDAwICsgKChjb2RlICYgMHgzZmYpIDw8IDEwIHwgbWVzc2FnZS5jaGFyQ29kZUF0KCsraW5kZXgpICYgMHgzZmYpO1xuICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweGYwIHwgY29kZSA+PiAxOCkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCBjb2RlID4+IDEyICYgMHgzZikgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCBjb2RlID4+IDYgJiAweDNmKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IGNvZGUgJiAweDNmKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5sYXN0Qnl0ZUluZGV4ID0gaTtcbiAgICBpZiAoaSA+PSBieXRlQ291bnQpIHtcbiAgICAgIHN0YXRlLnN0YXJ0ID0gaSAtIGJ5dGVDb3VudDtcbiAgICAgIHN0YXRlLmJsb2NrID0gYmxvY2tzW2Jsb2NrQ291bnRdO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGJsb2NrQ291bnQ7ICsraSkge1xuICAgICAgICBzW2ldIF49IGJsb2Nrc1tpXTtcbiAgICAgIH1cbiAgICAgIGYocyk7XG4gICAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnN0YXJ0ID0gaTtcbiAgICB9XG4gIH1cblxuICAvLyBmaW5hbGl6ZVxuICBpID0gc3RhdGUubGFzdEJ5dGVJbmRleDtcbiAgYmxvY2tzW2kgPj4gMl0gfD0gS0VDQ0FLX1BBRERJTkdbaSAmIDNdO1xuICBpZiAoc3RhdGUubGFzdEJ5dGVJbmRleCA9PT0gYnl0ZUNvdW50KSB7XG4gICAgYmxvY2tzWzBdID0gYmxvY2tzW2Jsb2NrQ291bnRdO1xuICAgIGZvciAoaSA9IDE7IGkgPCBibG9ja0NvdW50ICsgMTsgKytpKSB7XG4gICAgICBibG9ja3NbaV0gPSAwO1xuICAgIH1cbiAgfVxuICBibG9ja3NbYmxvY2tDb3VudCAtIDFdIHw9IDB4ODAwMDAwMDA7XG4gIGZvciAoaSA9IDA7IGkgPCBibG9ja0NvdW50OyArK2kpIHtcbiAgICBzW2ldIF49IGJsb2Nrc1tpXTtcbiAgfVxuICBmKHMpO1xuXG4gIC8vIHRvU3RyaW5nXG4gIHZhciBoZXggPSAnJyxcbiAgICAgIGkgPSAwLFxuICAgICAgaiA9IDAsXG4gICAgICBibG9jaztcbiAgd2hpbGUgKGogPCBvdXRwdXRCbG9ja3MpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYmxvY2tDb3VudCAmJiBqIDwgb3V0cHV0QmxvY2tzOyArK2ksICsraikge1xuICAgICAgYmxvY2sgPSBzW2ldO1xuICAgICAgaGV4ICs9IEhFWF9DSEFSU1tibG9jayA+PiA0ICYgMHgwRl0gKyBIRVhfQ0hBUlNbYmxvY2sgJiAweDBGXSArIEhFWF9DSEFSU1tibG9jayA+PiAxMiAmIDB4MEZdICsgSEVYX0NIQVJTW2Jsb2NrID4+IDggJiAweDBGXSArIEhFWF9DSEFSU1tibG9jayA+PiAyMCAmIDB4MEZdICsgSEVYX0NIQVJTW2Jsb2NrID4+IDE2ICYgMHgwRl0gKyBIRVhfQ0hBUlNbYmxvY2sgPj4gMjggJiAweDBGXSArIEhFWF9DSEFSU1tibG9jayA+PiAyNCAmIDB4MEZdO1xuICAgIH1cbiAgICBpZiAoaiAlIGJsb2NrQ291bnQgPT09IDApIHtcbiAgICAgIGYocyk7XG4gICAgICBpID0gMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFwiMHhcIiArIGhleDtcbn07XG5cbmNvbnN0IGYgPSBzID0+IHtcbiAgdmFyIGgsIGwsIG4sIGMwLCBjMSwgYzIsIGMzLCBjNCwgYzUsIGM2LCBjNywgYzgsIGM5LCBiMCwgYjEsIGIyLCBiMywgYjQsIGI1LCBiNiwgYjcsIGI4LCBiOSwgYjEwLCBiMTEsIGIxMiwgYjEzLCBiMTQsIGIxNSwgYjE2LCBiMTcsIGIxOCwgYjE5LCBiMjAsIGIyMSwgYjIyLCBiMjMsIGIyNCwgYjI1LCBiMjYsIGIyNywgYjI4LCBiMjksIGIzMCwgYjMxLCBiMzIsIGIzMywgYjM0LCBiMzUsIGIzNiwgYjM3LCBiMzgsIGIzOSwgYjQwLCBiNDEsIGI0MiwgYjQzLCBiNDQsIGI0NSwgYjQ2LCBiNDcsIGI0OCwgYjQ5O1xuXG4gIGZvciAobiA9IDA7IG4gPCA0ODsgbiArPSAyKSB7XG4gICAgYzAgPSBzWzBdIF4gc1sxMF0gXiBzWzIwXSBeIHNbMzBdIF4gc1s0MF07XG4gICAgYzEgPSBzWzFdIF4gc1sxMV0gXiBzWzIxXSBeIHNbMzFdIF4gc1s0MV07XG4gICAgYzIgPSBzWzJdIF4gc1sxMl0gXiBzWzIyXSBeIHNbMzJdIF4gc1s0Ml07XG4gICAgYzMgPSBzWzNdIF4gc1sxM10gXiBzWzIzXSBeIHNbMzNdIF4gc1s0M107XG4gICAgYzQgPSBzWzRdIF4gc1sxNF0gXiBzWzI0XSBeIHNbMzRdIF4gc1s0NF07XG4gICAgYzUgPSBzWzVdIF4gc1sxNV0gXiBzWzI1XSBeIHNbMzVdIF4gc1s0NV07XG4gICAgYzYgPSBzWzZdIF4gc1sxNl0gXiBzWzI2XSBeIHNbMzZdIF4gc1s0Nl07XG4gICAgYzcgPSBzWzddIF4gc1sxN10gXiBzWzI3XSBeIHNbMzddIF4gc1s0N107XG4gICAgYzggPSBzWzhdIF4gc1sxOF0gXiBzWzI4XSBeIHNbMzhdIF4gc1s0OF07XG4gICAgYzkgPSBzWzldIF4gc1sxOV0gXiBzWzI5XSBeIHNbMzldIF4gc1s0OV07XG5cbiAgICBoID0gYzggXiAoYzIgPDwgMSB8IGMzID4+PiAzMSk7XG4gICAgbCA9IGM5IF4gKGMzIDw8IDEgfCBjMiA+Pj4gMzEpO1xuICAgIHNbMF0gXj0gaDtcbiAgICBzWzFdIF49IGw7XG4gICAgc1sxMF0gXj0gaDtcbiAgICBzWzExXSBePSBsO1xuICAgIHNbMjBdIF49IGg7XG4gICAgc1syMV0gXj0gbDtcbiAgICBzWzMwXSBePSBoO1xuICAgIHNbMzFdIF49IGw7XG4gICAgc1s0MF0gXj0gaDtcbiAgICBzWzQxXSBePSBsO1xuICAgIGggPSBjMCBeIChjNCA8PCAxIHwgYzUgPj4+IDMxKTtcbiAgICBsID0gYzEgXiAoYzUgPDwgMSB8IGM0ID4+PiAzMSk7XG4gICAgc1syXSBePSBoO1xuICAgIHNbM10gXj0gbDtcbiAgICBzWzEyXSBePSBoO1xuICAgIHNbMTNdIF49IGw7XG4gICAgc1syMl0gXj0gaDtcbiAgICBzWzIzXSBePSBsO1xuICAgIHNbMzJdIF49IGg7XG4gICAgc1szM10gXj0gbDtcbiAgICBzWzQyXSBePSBoO1xuICAgIHNbNDNdIF49IGw7XG4gICAgaCA9IGMyIF4gKGM2IDw8IDEgfCBjNyA+Pj4gMzEpO1xuICAgIGwgPSBjMyBeIChjNyA8PCAxIHwgYzYgPj4+IDMxKTtcbiAgICBzWzRdIF49IGg7XG4gICAgc1s1XSBePSBsO1xuICAgIHNbMTRdIF49IGg7XG4gICAgc1sxNV0gXj0gbDtcbiAgICBzWzI0XSBePSBoO1xuICAgIHNbMjVdIF49IGw7XG4gICAgc1szNF0gXj0gaDtcbiAgICBzWzM1XSBePSBsO1xuICAgIHNbNDRdIF49IGg7XG4gICAgc1s0NV0gXj0gbDtcbiAgICBoID0gYzQgXiAoYzggPDwgMSB8IGM5ID4+PiAzMSk7XG4gICAgbCA9IGM1IF4gKGM5IDw8IDEgfCBjOCA+Pj4gMzEpO1xuICAgIHNbNl0gXj0gaDtcbiAgICBzWzddIF49IGw7XG4gICAgc1sxNl0gXj0gaDtcbiAgICBzWzE3XSBePSBsO1xuICAgIHNbMjZdIF49IGg7XG4gICAgc1syN10gXj0gbDtcbiAgICBzWzM2XSBePSBoO1xuICAgIHNbMzddIF49IGw7XG4gICAgc1s0Nl0gXj0gaDtcbiAgICBzWzQ3XSBePSBsO1xuICAgIGggPSBjNiBeIChjMCA8PCAxIHwgYzEgPj4+IDMxKTtcbiAgICBsID0gYzcgXiAoYzEgPDwgMSB8IGMwID4+PiAzMSk7XG4gICAgc1s4XSBePSBoO1xuICAgIHNbOV0gXj0gbDtcbiAgICBzWzE4XSBePSBoO1xuICAgIHNbMTldIF49IGw7XG4gICAgc1syOF0gXj0gaDtcbiAgICBzWzI5XSBePSBsO1xuICAgIHNbMzhdIF49IGg7XG4gICAgc1szOV0gXj0gbDtcbiAgICBzWzQ4XSBePSBoO1xuICAgIHNbNDldIF49IGw7XG5cbiAgICBiMCA9IHNbMF07XG4gICAgYjEgPSBzWzFdO1xuICAgIGIzMiA9IHNbMTFdIDw8IDQgfCBzWzEwXSA+Pj4gMjg7XG4gICAgYjMzID0gc1sxMF0gPDwgNCB8IHNbMTFdID4+PiAyODtcbiAgICBiMTQgPSBzWzIwXSA8PCAzIHwgc1syMV0gPj4+IDI5O1xuICAgIGIxNSA9IHNbMjFdIDw8IDMgfCBzWzIwXSA+Pj4gMjk7XG4gICAgYjQ2ID0gc1szMV0gPDwgOSB8IHNbMzBdID4+PiAyMztcbiAgICBiNDcgPSBzWzMwXSA8PCA5IHwgc1szMV0gPj4+IDIzO1xuICAgIGIyOCA9IHNbNDBdIDw8IDE4IHwgc1s0MV0gPj4+IDE0O1xuICAgIGIyOSA9IHNbNDFdIDw8IDE4IHwgc1s0MF0gPj4+IDE0O1xuICAgIGIyMCA9IHNbMl0gPDwgMSB8IHNbM10gPj4+IDMxO1xuICAgIGIyMSA9IHNbM10gPDwgMSB8IHNbMl0gPj4+IDMxO1xuICAgIGIyID0gc1sxM10gPDwgMTIgfCBzWzEyXSA+Pj4gMjA7XG4gICAgYjMgPSBzWzEyXSA8PCAxMiB8IHNbMTNdID4+PiAyMDtcbiAgICBiMzQgPSBzWzIyXSA8PCAxMCB8IHNbMjNdID4+PiAyMjtcbiAgICBiMzUgPSBzWzIzXSA8PCAxMCB8IHNbMjJdID4+PiAyMjtcbiAgICBiMTYgPSBzWzMzXSA8PCAxMyB8IHNbMzJdID4+PiAxOTtcbiAgICBiMTcgPSBzWzMyXSA8PCAxMyB8IHNbMzNdID4+PiAxOTtcbiAgICBiNDggPSBzWzQyXSA8PCAyIHwgc1s0M10gPj4+IDMwO1xuICAgIGI0OSA9IHNbNDNdIDw8IDIgfCBzWzQyXSA+Pj4gMzA7XG4gICAgYjQwID0gc1s1XSA8PCAzMCB8IHNbNF0gPj4+IDI7XG4gICAgYjQxID0gc1s0XSA8PCAzMCB8IHNbNV0gPj4+IDI7XG4gICAgYjIyID0gc1sxNF0gPDwgNiB8IHNbMTVdID4+PiAyNjtcbiAgICBiMjMgPSBzWzE1XSA8PCA2IHwgc1sxNF0gPj4+IDI2O1xuICAgIGI0ID0gc1syNV0gPDwgMTEgfCBzWzI0XSA+Pj4gMjE7XG4gICAgYjUgPSBzWzI0XSA8PCAxMSB8IHNbMjVdID4+PiAyMTtcbiAgICBiMzYgPSBzWzM0XSA8PCAxNSB8IHNbMzVdID4+PiAxNztcbiAgICBiMzcgPSBzWzM1XSA8PCAxNSB8IHNbMzRdID4+PiAxNztcbiAgICBiMTggPSBzWzQ1XSA8PCAyOSB8IHNbNDRdID4+PiAzO1xuICAgIGIxOSA9IHNbNDRdIDw8IDI5IHwgc1s0NV0gPj4+IDM7XG4gICAgYjEwID0gc1s2XSA8PCAyOCB8IHNbN10gPj4+IDQ7XG4gICAgYjExID0gc1s3XSA8PCAyOCB8IHNbNl0gPj4+IDQ7XG4gICAgYjQyID0gc1sxN10gPDwgMjMgfCBzWzE2XSA+Pj4gOTtcbiAgICBiNDMgPSBzWzE2XSA8PCAyMyB8IHNbMTddID4+PiA5O1xuICAgIGIyNCA9IHNbMjZdIDw8IDI1IHwgc1syN10gPj4+IDc7XG4gICAgYjI1ID0gc1syN10gPDwgMjUgfCBzWzI2XSA+Pj4gNztcbiAgICBiNiA9IHNbMzZdIDw8IDIxIHwgc1szN10gPj4+IDExO1xuICAgIGI3ID0gc1szN10gPDwgMjEgfCBzWzM2XSA+Pj4gMTE7XG4gICAgYjM4ID0gc1s0N10gPDwgMjQgfCBzWzQ2XSA+Pj4gODtcbiAgICBiMzkgPSBzWzQ2XSA8PCAyNCB8IHNbNDddID4+PiA4O1xuICAgIGIzMCA9IHNbOF0gPDwgMjcgfCBzWzldID4+PiA1O1xuICAgIGIzMSA9IHNbOV0gPDwgMjcgfCBzWzhdID4+PiA1O1xuICAgIGIxMiA9IHNbMThdIDw8IDIwIHwgc1sxOV0gPj4+IDEyO1xuICAgIGIxMyA9IHNbMTldIDw8IDIwIHwgc1sxOF0gPj4+IDEyO1xuICAgIGI0NCA9IHNbMjldIDw8IDcgfCBzWzI4XSA+Pj4gMjU7XG4gICAgYjQ1ID0gc1syOF0gPDwgNyB8IHNbMjldID4+PiAyNTtcbiAgICBiMjYgPSBzWzM4XSA8PCA4IHwgc1szOV0gPj4+IDI0O1xuICAgIGIyNyA9IHNbMzldIDw8IDggfCBzWzM4XSA+Pj4gMjQ7XG4gICAgYjggPSBzWzQ4XSA8PCAxNCB8IHNbNDldID4+PiAxODtcbiAgICBiOSA9IHNbNDldIDw8IDE0IHwgc1s0OF0gPj4+IDE4O1xuXG4gICAgc1swXSA9IGIwIF4gfmIyICYgYjQ7XG4gICAgc1sxXSA9IGIxIF4gfmIzICYgYjU7XG4gICAgc1sxMF0gPSBiMTAgXiB+YjEyICYgYjE0O1xuICAgIHNbMTFdID0gYjExIF4gfmIxMyAmIGIxNTtcbiAgICBzWzIwXSA9IGIyMCBeIH5iMjIgJiBiMjQ7XG4gICAgc1syMV0gPSBiMjEgXiB+YjIzICYgYjI1O1xuICAgIHNbMzBdID0gYjMwIF4gfmIzMiAmIGIzNDtcbiAgICBzWzMxXSA9IGIzMSBeIH5iMzMgJiBiMzU7XG4gICAgc1s0MF0gPSBiNDAgXiB+YjQyICYgYjQ0O1xuICAgIHNbNDFdID0gYjQxIF4gfmI0MyAmIGI0NTtcbiAgICBzWzJdID0gYjIgXiB+YjQgJiBiNjtcbiAgICBzWzNdID0gYjMgXiB+YjUgJiBiNztcbiAgICBzWzEyXSA9IGIxMiBeIH5iMTQgJiBiMTY7XG4gICAgc1sxM10gPSBiMTMgXiB+YjE1ICYgYjE3O1xuICAgIHNbMjJdID0gYjIyIF4gfmIyNCAmIGIyNjtcbiAgICBzWzIzXSA9IGIyMyBeIH5iMjUgJiBiMjc7XG4gICAgc1szMl0gPSBiMzIgXiB+YjM0ICYgYjM2O1xuICAgIHNbMzNdID0gYjMzIF4gfmIzNSAmIGIzNztcbiAgICBzWzQyXSA9IGI0MiBeIH5iNDQgJiBiNDY7XG4gICAgc1s0M10gPSBiNDMgXiB+YjQ1ICYgYjQ3O1xuICAgIHNbNF0gPSBiNCBeIH5iNiAmIGI4O1xuICAgIHNbNV0gPSBiNSBeIH5iNyAmIGI5O1xuICAgIHNbMTRdID0gYjE0IF4gfmIxNiAmIGIxODtcbiAgICBzWzE1XSA9IGIxNSBeIH5iMTcgJiBiMTk7XG4gICAgc1syNF0gPSBiMjQgXiB+YjI2ICYgYjI4O1xuICAgIHNbMjVdID0gYjI1IF4gfmIyNyAmIGIyOTtcbiAgICBzWzM0XSA9IGIzNCBeIH5iMzYgJiBiMzg7XG4gICAgc1szNV0gPSBiMzUgXiB+YjM3ICYgYjM5O1xuICAgIHNbNDRdID0gYjQ0IF4gfmI0NiAmIGI0ODtcbiAgICBzWzQ1XSA9IGI0NSBeIH5iNDcgJiBiNDk7XG4gICAgc1s2XSA9IGI2IF4gfmI4ICYgYjA7XG4gICAgc1s3XSA9IGI3IF4gfmI5ICYgYjE7XG4gICAgc1sxNl0gPSBiMTYgXiB+YjE4ICYgYjEwO1xuICAgIHNbMTddID0gYjE3IF4gfmIxOSAmIGIxMTtcbiAgICBzWzI2XSA9IGIyNiBeIH5iMjggJiBiMjA7XG4gICAgc1syN10gPSBiMjcgXiB+YjI5ICYgYjIxO1xuICAgIHNbMzZdID0gYjM2IF4gfmIzOCAmIGIzMDtcbiAgICBzWzM3XSA9IGIzNyBeIH5iMzkgJiBiMzE7XG4gICAgc1s0Nl0gPSBiNDYgXiB+YjQ4ICYgYjQwO1xuICAgIHNbNDddID0gYjQ3IF4gfmI0OSAmIGI0MTtcbiAgICBzWzhdID0gYjggXiB+YjAgJiBiMjtcbiAgICBzWzldID0gYjkgXiB+YjEgJiBiMztcbiAgICBzWzE4XSA9IGIxOCBeIH5iMTAgJiBiMTI7XG4gICAgc1sxOV0gPSBiMTkgXiB+YjExICYgYjEzO1xuICAgIHNbMjhdID0gYjI4IF4gfmIyMCAmIGIyMjtcbiAgICBzWzI5XSA9IGIyOSBeIH5iMjEgJiBiMjM7XG4gICAgc1szOF0gPSBiMzggXiB+YjMwICYgYjMyO1xuICAgIHNbMzldID0gYjM5IF4gfmIzMSAmIGIzMztcbiAgICBzWzQ4XSA9IGI0OCBeIH5iNDAgJiBiNDI7XG4gICAgc1s0OV0gPSBiNDkgXiB+YjQxICYgYjQzO1xuXG4gICAgc1swXSBePSBSQ1tuXTtcbiAgICBzWzFdIF49IFJDW24gKyAxXTtcbiAgfVxufTtcblxuY29uc3Qga2VjY2FrID0gYml0cyA9PiBzdHIgPT4ge1xuICB2YXIgbXNnO1xuICBpZiAoc3RyLnNsaWNlKDAsIDIpID09PSBcIjB4XCIpIHtcbiAgICBtc2cgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMiwgbCA9IHN0ci5sZW5ndGg7IGkgPCBsOyBpICs9IDIpIG1zZy5wdXNoKHBhcnNlSW50KHN0ci5zbGljZShpLCBpICsgMiksIDE2KSk7XG4gIH0gZWxzZSB7XG4gICAgbXNnID0gc3RyO1xuICB9XG4gIHJldHVybiB1cGRhdGUoS2VjY2FrKGJpdHMsIGJpdHMpLCBtc2cpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGtlY2NhazI1Njoga2VjY2FrKDI1NiksXG4gIGtlY2NhazUxMjoga2VjY2FrKDUxMiksXG4gIGtlY2NhazI1NnM6IGtlY2NhaygyNTYpLFxuICBrZWNjYWs1MTJzOiBrZWNjYWsoNTEyKVxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/nat.js":
/*!*****************************************!*\
  !*** ./node_modules/eth-lib/lib/nat.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nconst Bytes = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/eth-lib/lib/bytes.js\");\n\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\n\nconst toBN = str => new BN(str.slice(2), 16);\n\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n\nconst toString = a => toBN(a).toString(10);\n\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n\nconst toNumber = a => toBN(a).toNumber();\n\nconst toUint256 = a => Bytes.pad(32, a);\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\n\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\n\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvbmF0LmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxtREFBTztBQUMxQixjQUFjLG1CQUFPLENBQUMsMERBQVM7O0FBRS9COztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGl3aS1hcHAvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvbmF0LmpzPzc2MGUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQk4gPSByZXF1aXJlKFwiYm4uanNcIik7XG5jb25zdCBCeXRlcyA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xuXG5jb25zdCBmcm9tQk4gPSBibiA9PiBcIjB4XCIgKyBibi50b1N0cmluZyhcImhleFwiKTtcblxuY29uc3QgdG9CTiA9IHN0ciA9PiBuZXcgQk4oc3RyLnNsaWNlKDIpLCAxNik7XG5cbmNvbnN0IGZyb21TdHJpbmcgPSBzdHIgPT4ge1xuICBjb25zdCBibiA9IFwiMHhcIiArIChzdHIuc2xpY2UoMCwgMikgPT09IFwiMHhcIiA/IG5ldyBCTihzdHIuc2xpY2UoMiksIDE2KSA6IG5ldyBCTihzdHIsIDEwKSkudG9TdHJpbmcoXCJoZXhcIik7XG4gIHJldHVybiBibiA9PT0gXCIweDBcIiA/IFwiMHhcIiA6IGJuO1xufTtcblxuY29uc3QgdG9FdGhlciA9IHdlaSA9PiB0b051bWJlcihkaXYod2VpLCBmcm9tU3RyaW5nKFwiMTAwMDAwMDAwMDBcIikpKSAvIDEwMDAwMDAwMDtcblxuY29uc3QgZnJvbUV0aGVyID0gZXRoID0+IG11bChmcm9tTnVtYmVyKE1hdGguZmxvb3IoZXRoICogMTAwMDAwMDAwKSksIGZyb21TdHJpbmcoXCIxMDAwMDAwMDAwMFwiKSk7XG5cbmNvbnN0IHRvU3RyaW5nID0gYSA9PiB0b0JOKGEpLnRvU3RyaW5nKDEwKTtcblxuY29uc3QgZnJvbU51bWJlciA9IGEgPT4gdHlwZW9mIGEgPT09IFwic3RyaW5nXCIgPyAvXjB4Ly50ZXN0KGEpID8gYSA6IFwiMHhcIiArIGEgOiBcIjB4XCIgKyBuZXcgQk4oYSkudG9TdHJpbmcoXCJoZXhcIik7XG5cbmNvbnN0IHRvTnVtYmVyID0gYSA9PiB0b0JOKGEpLnRvTnVtYmVyKCk7XG5cbmNvbnN0IHRvVWludDI1NiA9IGEgPT4gQnl0ZXMucGFkKDMyLCBhKTtcblxuY29uc3QgYmluID0gbWV0aG9kID0+IChhLCBiKSA9PiBmcm9tQk4odG9CTihhKVttZXRob2RdKHRvQk4oYikpKTtcblxuY29uc3QgYWRkID0gYmluKFwiYWRkXCIpO1xuY29uc3QgbXVsID0gYmluKFwibXVsXCIpO1xuY29uc3QgZGl2ID0gYmluKFwiZGl2XCIpO1xuY29uc3Qgc3ViID0gYmluKFwic3ViXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdG9TdHJpbmcsXG4gIGZyb21TdHJpbmcsXG4gIHRvTnVtYmVyLFxuICBmcm9tTnVtYmVyLFxuICB0b0V0aGVyLFxuICBmcm9tRXRoZXIsXG4gIHRvVWludDI1NixcbiAgYWRkLFxuICBtdWwsXG4gIGRpdixcbiAgc3ViXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/nat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-lib/lib/rlp.js":
/*!*****************************************!*\
  !*** ./node_modules/eth-lib/lib/rlp.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nconst encode = tree => {\n  const padEven = str => str.length % 2 === 0 ? str : \"0\" + str;\n\n  const uint = num => padEven(num.toString(16));\n\n  const length = (len, add) => len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n\n  const dataTree = tree => {\n    if (typeof tree === \"string\") {\n      const hex = tree.slice(2);\n      const pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      const hex = tree.map(dataTree).join(\"\");\n      const pre = length(hex.length / 2, 192);\n      return pre + hex;\n    }\n  };\n\n  return \"0x\" + dataTree(tree);\n};\n\nconst decode = hex => {\n  let i = 2;\n\n  const parseTree = () => {\n    if (i >= hex.length) throw \"\";\n    const head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n\n  const parseLength = () => {\n    const len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n\n  const parseHex = () => {\n    const len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n\n  const parseList = () => {\n    const lim = parseLength() * 2 + i;\n    let list = [];\n    while (i < lim) list.push(parseTree());\n    return list;\n  };\n\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\n\nmodule.exports = { encode, decode };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvcmxwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGl3aS1hcHAvLi9ub2RlX21vZHVsZXMvZXRoLWxpYi9saWIvcmxwLmpzPzhkZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIFJMUCBmb3JtYXRcbi8vIFNlcmlhbGl6YXRpb24gYW5kIGRlc2VyaWFsaXphdGlvbiBmb3IgdGhlIEJ5dGVzVHJlZSB0eXBlLCB1bmRlciB0aGUgZm9sbG93aW5nIGdyYW1tYXI6XG4vLyB8IEZpcnN0IGJ5dGUgfCBNZWFuaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4vLyB8IC0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG4vLyB8IDAgICB0byAxMjcgfCBIRVgobGVhZikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4vLyB8IDEyOCB0byAxODMgfCBIRVgobGVuZ3RoX29mX2xlYWYgKyAxMjgpICsgSEVYKGxlYWYpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4vLyB8IDE4NCB0byAxOTEgfCBIRVgobGVuZ3RoX29mX2xlbmd0aF9vZl9sZWFmICsgMTI4ICsgNTUpICsgSEVYKGxlbmd0aF9vZl9sZWFmKSArIEhFWChsZWFmKSB8XG4vLyB8IDE5MiB0byAyNDcgfCBIRVgobGVuZ3RoX29mX25vZGUgKyAxOTIpICsgSEVYKG5vZGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4vLyB8IDI0OCB0byAyNTUgfCBIRVgobGVuZ3RoX29mX2xlbmd0aF9vZl9ub2RlICsgMTI4ICsgNTUpICsgSEVYKGxlbmd0aF9vZl9ub2RlKSArIEhFWChub2RlKSB8XG5cbmNvbnN0IGVuY29kZSA9IHRyZWUgPT4ge1xuICBjb25zdCBwYWRFdmVuID0gc3RyID0+IHN0ci5sZW5ndGggJSAyID09PSAwID8gc3RyIDogXCIwXCIgKyBzdHI7XG5cbiAgY29uc3QgdWludCA9IG51bSA9PiBwYWRFdmVuKG51bS50b1N0cmluZygxNikpO1xuXG4gIGNvbnN0IGxlbmd0aCA9IChsZW4sIGFkZCkgPT4gbGVuIDwgNTYgPyB1aW50KGFkZCArIGxlbikgOiB1aW50KGFkZCArIHVpbnQobGVuKS5sZW5ndGggLyAyICsgNTUpICsgdWludChsZW4pO1xuXG4gIGNvbnN0IGRhdGFUcmVlID0gdHJlZSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0cmVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBoZXggPSB0cmVlLnNsaWNlKDIpO1xuICAgICAgY29uc3QgcHJlID0gaGV4Lmxlbmd0aCAhPSAyIHx8IGhleCA+PSBcIjgwXCIgPyBsZW5ndGgoaGV4Lmxlbmd0aCAvIDIsIDEyOCkgOiBcIlwiO1xuICAgICAgcmV0dXJuIHByZSArIGhleDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGV4ID0gdHJlZS5tYXAoZGF0YVRyZWUpLmpvaW4oXCJcIik7XG4gICAgICBjb25zdCBwcmUgPSBsZW5ndGgoaGV4Lmxlbmd0aCAvIDIsIDE5Mik7XG4gICAgICByZXR1cm4gcHJlICsgaGV4O1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gXCIweFwiICsgZGF0YVRyZWUodHJlZSk7XG59O1xuXG5jb25zdCBkZWNvZGUgPSBoZXggPT4ge1xuICBsZXQgaSA9IDI7XG5cbiAgY29uc3QgcGFyc2VUcmVlID0gKCkgPT4ge1xuICAgIGlmIChpID49IGhleC5sZW5ndGgpIHRocm93IFwiXCI7XG4gICAgY29uc3QgaGVhZCA9IGhleC5zbGljZShpLCBpICsgMik7XG4gICAgcmV0dXJuIGhlYWQgPCBcIjgwXCIgPyAoaSArPSAyLCBcIjB4XCIgKyBoZWFkKSA6IGhlYWQgPCBcImMwXCIgPyBwYXJzZUhleCgpIDogcGFyc2VMaXN0KCk7XG4gIH07XG5cbiAgY29uc3QgcGFyc2VMZW5ndGggPSAoKSA9PiB7XG4gICAgY29uc3QgbGVuID0gcGFyc2VJbnQoaGV4LnNsaWNlKGksIGkgKz0gMiksIDE2KSAlIDY0O1xuICAgIHJldHVybiBsZW4gPCA1NiA/IGxlbiA6IHBhcnNlSW50KGhleC5zbGljZShpLCBpICs9IChsZW4gLSA1NSkgKiAyKSwgMTYpO1xuICB9O1xuXG4gIGNvbnN0IHBhcnNlSGV4ID0gKCkgPT4ge1xuICAgIGNvbnN0IGxlbiA9IHBhcnNlTGVuZ3RoKCk7XG4gICAgcmV0dXJuIFwiMHhcIiArIGhleC5zbGljZShpLCBpICs9IGxlbiAqIDIpO1xuICB9O1xuXG4gIGNvbnN0IHBhcnNlTGlzdCA9ICgpID0+IHtcbiAgICBjb25zdCBsaW0gPSBwYXJzZUxlbmd0aCgpICogMiArIGk7XG4gICAgbGV0IGxpc3QgPSBbXTtcbiAgICB3aGlsZSAoaSA8IGxpbSkgbGlzdC5wdXNoKHBhcnNlVHJlZSgpKTtcbiAgICByZXR1cm4gbGlzdDtcbiAgfTtcblxuICB0cnkge1xuICAgIHJldHVybiBwYXJzZVRyZWUoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGVuY29kZSwgZGVjb2RlIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-lib/lib/rlp.js\n");

/***/ })

};
;